/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import 'package:protobuf/protobuf.dart';
import 'package:spine_client/spine/validate/validation_error.pb.dart';
import 'package:spine_client/types.dart' as standardTypes;
import 'package:spine_client/unknown_type.dart';

/// The only instance of [KnownTypes].
final theKnownTypes = KnownTypes._instance();

typedef ValidationError _Validator(GeneratedMessage m);

/// All the Protobuf types known to a client application.
///
/// Known types are discovered from `types.dart` files, which are generated by the Proto Dart Gradle
/// plugin.
///
class KnownTypes {

    final Map<String, BuilderInfo> _typeUrlToBuilderInfo = Map();
    final Set<GeneratedMessage> _defaults = Set();
    final Map<Type, String> _typeToUrl = Map();
    final Map<String, _Validator> _validators = Map();

    TypeRegistry _jsonRegistry = TypeRegistry([]);

    KnownTypes._instance() {
        register(standardTypes.types());
        _jsonRegistry = _assembleRegistry();
    }

    /// Looks up a [BuilderInfo] by the given type URL.
    ///
    /// Returns `null` if the type is unknown.
    ///
    BuilderInfo? findBuilderInfo(String typeUrl) {
        return _typeUrlToBuilderInfo[typeUrl];
    }

    /// Looks up a type URL of the given message type.
    ///
    /// Throws an `StateError` if the type is unknown.
    ///
    String typeUrlFrom(Type type) {
        var typeUrl = _typeToUrl[type];
        if (typeUrl == null) {
            throw UnknownTypeError(runtimeType: type);
        }
        return typeUrl;
    }

    /// Looks up a type URL of the given message.
    ///
    /// Throws an `UnknownTypeError` if the type is unknown.
    ///
    String typeUrlOf(GeneratedMessage message) {
        return typeUrlFrom(message.runtimeType);
    }

    /// Obtains a validator function for the given message.
    ValidationError Function(GeneratedMessage) validatorFor(GeneratedMessage message) {
        var typeUrl = typeUrlOf(message);
        return _validators[typeUrl]!;
    }

    /// Obtains a registry for JSON parsing.
    TypeRegistry registry() {
        return _jsonRegistry;
    }

    /// Registers the given type provider.
    ///
    /// [types] should be obtained from the `types()` method in the generated `types.dart` file.
    ///
    void register(dynamic types) {
        Map<String, BuilderInfo> typeUrlToBuilderInfo = types.typeUrlToInfo;
        Map<GeneratedMessage, String> msgToTypeUrl = types.defaultToTypeUrl;
        Map<String, _Validator> validationFunctions = types.validators;
        _typeUrlToBuilderInfo.addAll(typeUrlToBuilderInfo);
        _defaults.addAll(msgToTypeUrl.keys);
        _typeToUrl.addAll(msgToTypeUrl.map((key, value) => MapEntry(key.runtimeType, value)));
        _validators.addAll(validationFunctions);
    }

    /// Registers each given type provider.
    ///
    /// Each element should be obtained from the `types()` method in a generated `types.dart` file.
    ///
    void registerAll(List<dynamic> typeRegistries) {
        for (var registry in typeRegistries) {
            register(registry);
        }
        _jsonRegistry = _assembleRegistry();
    }

    /// Constructs a registry for JSON parsing.
    TypeRegistry _assembleRegistry() {
        return TypeRegistry(_defaults);
    }
}
