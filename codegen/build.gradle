/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.codehaus.plexus.util.Os

ext {
    final def windows = Os.isFamily(Os.FAMILY_WINDOWS);
    pubCache = windows
            ? "${System.getenv('APPDATA')}/Pub/Cache/bin"
            : "${System.getProperty('user.home')}/.pub-cache/bin"
    scriptExtension = windows ? '.bat' : ''
}

task copyDartProtobuf(type: Copy) {
    from protoDart
}

dependencies {
    protobuf deps.build.protobuf
    protobuf "io.spine:spine-base:$spineBaseVersion"
    protobuf "io.spine.tools:spine-tool-base:$spineBaseVersion"

    testImplementation "io.spine:spine-testlib:$spineBaseVersion"
}

task generateTestValidators(type: Exec) {
    final def command = "$pubCache/dart_code_gen$scriptExtension"
    commandLine(command,
            '--descriptor', "${file(protoDart.testDescriptorSet.get())}",
            '--destination', "$projectDir/test/validators.dart",
            '--standard-types', 'dart_code_gen',
            '--import-prefix', 'package:codegen_test')
}

tasks['testDart'].dependsOn 'activateLocally', 'generateTestValidators'

tasks.withType(JavaCompile)*.enabled false

task cleanProto(type: Delete) {

    delete += "$projectDir/proto"
}

clean.dependsOn 'cleanProto'
