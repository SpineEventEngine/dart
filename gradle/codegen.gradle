/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.yaml.snakeyaml.Yaml

buildscript { final scriptHandler ->
    defaultRepositories(scriptHandler)
    dependencies {
        classpath 'org.yaml:snakeyaml:1.25'
    }
}

final def windows = Os.isFamily(Os.FAMILY_WINDOWS)
final def pubCache = windows
        ? "${System.getenv('APPDATA')}/Pub/Cache/bin"
        : "${System.getProperty('user.home')}/.pub-cache/bin"
final def scriptExtension = windows ? '.bat' : ''
final def command = "$pubCache/dart_code_gen$scriptExtension"
final def pubSpec = new Yaml().load(file("${project.projectDir}/pubspec.yaml").newInputStream())

final def composeCommandLine = { final descriptor, final String targetDir ->
    return [command,
            '--descriptor', "${file(descriptor.get())}",
            '--destination', "$targetDir/types.dart",
            '--standard-types', pubSpec.name,
            '--import-prefix', '.']
}

class GenerateDart extends Exec {

    def descriptor
    def target
}

task generateDart(type: GenerateDart) {
    descriptor = protoDart.mainDescriptorSet
    target = "$projectDir/lib"
}

afterEvaluate {
    generateDart {
        inputs.file(descriptor)
        commandLine(composeCommandLine(descriptor, target))
        dependsOn ':codegen:activateLocally'
    }
}
